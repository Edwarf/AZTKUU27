<print>[Prints to console]
<while>[Iterates while conditional keyword is true]
<for>[Iterates over a collection of items or range of numbers]
<break>[Interrupts a loop cycle]
<continue>[Jumps to beginning of a new cycle]
<if>[Executes block based on condition]
<elif>[If first if/elif evaluated to false, will evaluate new conditional to execute its own block.]
<else>[If every if/elif failed, will execute its block]
<is>[Tests object identity]
<and>[Adds a second conditional to a boolean expression]
<or>[Adds a second conditional to a boolean expression. Executes block if either original or added statement evaluates to true.]
<not>[Negates boolean value.]
<import>[Imports modules into script]
<as>[Grants module a different alias]
<from>[Imports specific variable, class, or function from module]
<def>[Creates a user defined function]
<return>[Exits function and returns value.]
<lambda>[Creates anonymous function]
<global>[Accesses variables defined outside of a function]
<try>[Specifies exception handlers]
<except>[Catches exception, executes code]
<finally>[Executed at the end of a block.]
<raise>[Creates uder defined exception]
<del>[Deletes object]
<pass>[Performs no action.]
<class>[Denotes beginning of user defined class definition.]
<yield>[Used to yield generator output]
<exec>[Dynamically executes Python code]
<assert>[Tests statement, raises error if one exists]
<+>[Addition operator newkey]
<->[Subtraction operator]
<*>[Multiplication operator]
</>[Division operator]
<%>[Modulus operator]
<**>[Exponential operator]
<//>[Integer division operator]
<==>[Comparison operator: Returns true if both operands are equal.]
<!=>[Returns true if two operands are unequal]
<>[Returns true if operands are unequal]
<>[Returns true if value of left operand is greater than value of right operand]
<>[Returns true if left operator is less thn right operaand]
<>[returns true if value of left operand is greater than or equal to value of right operand]=
<=>[Returns true if value of left operand is less than or equal to value of right operand]
<=>[Assigns values from right to left]
<+=>[Adds right to left, assings to left]
<-=>[subtracts right from left, assings to left]
<*=>[Multiplies right to left, assings to left]
</=>[Divides left with right, assigns to left]
<%=>[Takes modulus of two operands, assings to left]
<**=>[Exponentiates powers, assigns to left]
<//=>[Performs integer division on two operands, assigns to left]
<&>[Copies a bit to result if exists in both operands]
<|>[Copies a bit if it exists in either]
<^>[XOR]
<~>[Flips bits]
<>[Binary left shift]
<>[Binary right shift]
<\t>[Seperates blocks of code(tab)]
<,>[Argument Seperator]
<(>[Begin function args]
<)>[End Function args]
<:>[Begins block execution]
<\n>[Terminates a code statement]
<int>[Converts to integer data type]
<str>[Converts to string data type]
<chr>[Converts to character data type]
<float>[Converts to floating point data type]
< >[Seperates Keywords]
<[>[Denotes beginning of array arguments]
<]>[Denotes end of array arguments]
