<asm>[Inserts ASM Commands directly into code]
<auto>[Optional keyword used to declare local variables]
<bool>[Identifies a boolean logic variable(True or false)]
<break>[Used to break out of a loop or finish a switch statement]
<case>[Used to declare a test in a switch statement]
<catch>[Handles exceptions generated by a throw statement]
<char>[Declares character variables]
<class>[Defines new class, privae members by default]
<const>[Ceates unmodifiable variable]
<const_cast>[Removes const protection on an object if object wasn't declares as const]
<continue>[jumps to next iteration of loop]
<default>[Declares default case of a switch statement]
<delete>[Frees memory allocated for a pointer back to the heap]
<delete[]>[Deletes an array]
<do>[Creates a loop that is executed at least once]
<double>[Creates double precision floating point variable]
<dynamic_cast>[Casts from one type of another with a check performed at runtime. If casts are incompatible, NULL is returned]
<else>[Alternative and final condition in an if statement]
<enum>[Defines an enumerated type]
<explicit>[Used to make sure that a constructor is only used for the creation of new values and not for the implicit conversion between two different types]
<export>[Used to export a template to other modules(Rarely used)]
<extern>[Informs the compiler of variables and functions defined outside of the current scope/module. Will not have space allocated for them since they are defined elsewhere.]
<false>[Used to represent the boolean value false]
<for>[Used to create a loop meant to intialize, test, and update a variable]
<friend>[Used to allow another class or function to have access to the private features of that class]
<goto>[Used to jump to another location in a function defined by a label]
<if>[Used to create a conditional brach statement]
<inline>[Tells the compiler that function is inserted into calling code]
<int>[Used to declare an integer type variable]
<long>[Used a data type modifier for the int and double types to indicate that they may have more bytes than the type has available]
<mutable>[Used to specify that it is a data field that can be modified even if another part is declared const]
<namespace>[Used to create a new scope]
<new>[Used to allocate a new block of memory for the given type from the heap, and return a pointer to that block of memory]
<operator>[Used to specify operator overloading]
<private>[Used within a class declaration to specify features of that class that can oly be accessed by itself and its friends]
<protacted>[Used within a class declaration to specify features that are private to its own class, but can be inherited by a derived class]
<public>[Used to specify features of that class that are accessable to everyone]
<register>[Used to recommend that a variable be placed into a processer register so that it is optimized for speed]
<reinterpret_cast>[Used to change one data type in a non-portable way]
<return>[Used to cause the execution to jump from the current function back to the one that called it]
<short>[Used to indicate a short integer]
<signed>[Used to specify that the number type could be negative, default representation.]
<sizeof>[Used to return the size of the object(in bytes)]
<static>[Used outside any function or class as a qualifier to a variable declaration makes the scope of the variable the file in which the variable is declared, and the extent is permanent (i.e., it is in the static segment).]
<static_cast>[Used for a normal conversion between types, no runtime check performed.]
<struct>[Used to declare a structure]
<switch>[Used to test an expression of integer value against many constant integer values]
<template>[Used to create generic functions that can operate on data without knowing the nature of the data]
<this>[Used as a pointer to the current object]
<throw>[Used together with try and catch statements to create an exception handling system]
<true>[Used to represent the boolean true value]
<try>[Used to attempt to execute exception-generating code]
<typedef>[Used to create a new type from an existing type]
<typeid>[Used to get a reference to the type_info object that describes the object it was passed]
<typename>[used to describe an undefined type or in place of class in a template declaration]
<union>[Used to create multiple data fields occupying the same location]
<unsigned>[Used to specify that int or char can only be positive and can therefore contain a larger number.]
<using>[Used to import a namespace into current scope]
<virtual>[Used to create virtual functions that can be overridden by derived functions]
<void>[Used to denote functions that return no value]
<volatile>[Used to inform compiler that a variables value can change in unexpected ways]
<while>[Loops through statements as long as a condition is true]
<wchar_t>[Used to declare a wide character variable]
<(>[Open parenthese, used in function cals]
<)>[Close parenthese]
<->>[Member selection via pointer]
<-->[Decrement]
<!>[Logical negation]
<~>[Bitwise complement]
<*>[Dereference/Multiplication]
<&>[Address(of operand)]
</>[Division]
<%>[Modulus]
<+>[Addition]
<->[Subtraction]
<<>[Relational less than]
<>>[Relational greater than]
<<=>[Less than or equal to]
<>=>[Greater than or equal to]
<==>[Relational is equal to]
<!=>[Relational not equal to]
<^>[Bitwise exclusive or]
<|>[Bitwise inclusive OR]
<&&>[Logical and]
<||>[Logical OR]
<?>[Ternary conditional]
<=>[Assignment]
<+=>[Addition Assignment]
<-=>[Subtraction assignment]
<*=>[Multiplication assignment]
</=>[Division assignment]
<%=>[Modulus assignment]
<&=>[Bitwise and assignment]
<^=>[Bitwise exclusive OR]
<|=>[Bitwise inclusive OR assignment]
<,>[Expression seperator]
